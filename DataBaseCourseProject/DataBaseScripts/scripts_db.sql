--Tables--

CREATE TABLE Users(
    Id NUMBER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    FirstName VARCHAR(50) NOT NULL,
    MIddleName VARCHAR(50) NULL,
    LastName VARCHAR(50) NOT NULL,
    Email VARCHAR(50) UNIQUE NOT NULL,
    PhoneNumber VARCHAR(50) UNIQUE NOT NULL,
    Password VARCHAR(200) NULL,
    CONSTRAINT PK_Users PRIMARY KEY(Id)
)

CREATE TABLE Producers(
    Id NUMBER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    Name VARCHAR(50) UNIQUE NOT NULL,
    CONSTRAINT PK_Producers PRIMARY KEY(Id)
)

CREATE TABLE Categories(
    Id NUMBER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    Name VARCHAR(50) UNIQUE NOT NULL,
    CONSTRAINT PK_Categories PRIMARY KEY(Id)
)

CREATE TABLE Subcategories(
    Id NUMBER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    Name VARCHAR(50) UNIQUE NOT NULL,
    CategoryId NUMBER NOT NULL,
    CONSTRAINT PK_Subcategories PRIMARY KEY(Id),
    CONSTRAINT FK_Subcategories_categories FOREIGN KEY(CategoryId) REFERENCES Categories(Id)
)

CREATE TABLE Products(
    Id NUMBER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    Name VARCHAR(50) UNIQUE NOT NULL,
    Description VARCHAR(300) NULL,
    SubcategoryId NUMBER NOT NULL,
    ProducerId NUMBER NOT NULL,
    Price NUMBER NOT NULL,
    Quantity NUMBER NOT NULL,
    CONSTRAINT PK_Procuts PRIMARY KEY(Id),
    CONSTRAINT FK_Products_Subcategories FOREIGN KEY(SubcategoryId) REFERENCES Subcategories(Id),
    CONSTRAINT FK_Products_Producers FOREIGN KEY(ProducerId) REFERENCES Producers(Id)
)

CREATE TABLE Reviews(
    Id NUMBER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    ProductId NUMBER NOT NULL,
    UserId NUMBER NOT NULL,
    Rating NUMBER(1) CHECK(Rating <= 5) NOT NULL,
    Comments VARCHAR(300) NULL,
    CONSTRAINT PK_Reviews PRIMARY KEY(Id),
    CONSTRAINT FK_Reviews_Products FOREIGN KEY(ProductId) REFERENCES Products(Id),
    CONSTRAINT FK_Reviews_Users FOREIGN KEY(UserId) REFERENCES Users(Id)
)

CREATE TABLE Orders(
    Id NUMBER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    UserId NUMBER NOT NULL,
    OrderDate DATE NOT NULL,
    ShipDate DATE NOT NULL,
    Adress VARCHAR(100) NOT NULL,
    CONSTRAINT PK_Orders PRIMARY KEY(Id),
    CONSTRAINT FK_Orders_Users FOREIGN KEY(UserId) REFERENCES Users(Id)
)

CREATE TABLE OrderDetails(
    Id NUMBER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    OrderId NUMBER NOT NULL,
    ProductId NUMBER NOT NULL,
    Quantity NUMBER NOT NULL,
    CONSTRAINT PK_OrderDetails PRIMARY KEY(Id),
    CONSTRAINT FK_OrderDetails_Orders FOREIGN KEY(OrderId) REFERENCES Orders(Id),
    CONSTRAINT FK_OrderDetails_Products FOREIGN KEY(ProductId) REFERENCES Products(Id)
)

CREATE TABLE ShoppingCarts(
    Id NUMBER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    UserId NUMBER NOT NULL,
    CONSTRAINT PK_ShoppingCarts PRIMARY KEY(Id),
    CONSTRAINT FK_ShoppingCarts FOREIGN KEY(UserId) REFERENCES Users(Id)
)

CREATE TABLE ShoppingCartDetails(
    Id NUMBER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    ShoppingCartId NUMBER NOT NULL,
    ProductId NUMBER NOT NULL,
    Quantity NUMBER NOT NULL,
    CONSTRAINT PK_ShoppingCartDetails PRIMARY KEY(Id),
    CONSTRAINT FK_CartDetails_Carts FOREIGN KEY(ShoppingCartId) REFERENCES ShoppingCarts(Id),
    CONSTRAINT FK_CartDetails_Products FOREIGN KEY(ProductId) REFERENCES Products(Id)
)

--Procedures--

CREATE PROCEDURE AddUser(FirstNameVar VARCHAR, MiddleNameVar VARCHAR, LastNameVar VARCHAR, EmailVar VARCHAR, PhoneNumberVar VARCHAR) AS
    BEGIN
        INSERT INTO Users(FirstName, MiddleName, LastName, Email, PhoneNumber)
            VALUES(FirstNameVar, MiddleNameVar, LastNameVar, EmailVar, PhoneNumberVar);
    END;

CREATE PROCEDURE AddProducer(NameVar VARCHAR) AS
    BEGIN
        INSERT INTO Producers(Name)
            VALUES(NameVar);
    END;

CREATE PROCEDURE AddCategory(NameVar VARCHAR) AS
    BEGIN
        INSERT INTO Categories(Name)
            VALUES(NameVar);
    END;
    
CREATE PROCEDURE AddSubcategory(NameVar VARCHAR, CategoryIdVar NUMBER) AS
    BEGIN
        INSERT INTO Subcategories(Name, CategoryId)
            VALUES(NameVar, CategoryIdVar);
    END;
    
CREATE PROCEDURE AddProduct(NameVar VARCHAR, DescriptionVar VARCHAR, SubcategoryIdVar NUMBER, ProducerIdVar NUMBER, PriceVar NUMBER, QuantityVar NUMBER) AS
    BEGIN
        INSERT INTO Products(Name, Description, SubcategoryId, ProducerId, Price, Quantity)
            VALUES(NameVar, DescriptionVar, SubcategoryIdVar, ProducerIdVar, PriceVar, QuantityVar);
    END;
    
CREATE PROCEDURE AddReview(ProductIdVar NUMBER, UserIdVar NUMBER, RatingVar NUMBER, CommentsVar VARCHAR) AS
    BEGIN
        INSERT INTO Reviews(ProductId, UserId, Rating, Comments)
            VALUES(ProductIdVar, UserIdVar, RatingVar, CommentsVar);
    END;
    
CREATE PROCEDURE AddOrder(UserIdVar NUMBER, OrderDateVar DATE, ShipDateVar DATE, AdressVar VARCHAR) AS
    BEGIN
        INSERT INTO Orders(UserId, OrderDate, ShipDate, Adress)
            VALUES(UserIdVar, OrderDateVar, ShipDateVar, AdressVar);
    END;
    
CREATE PROCEDURE AddOrderDetails(OrderIdVar NUMBER, ProductIdVar NUMBER, QuantityVar NUMBER) AS
    BEGIN
        INSERT INTO OrderDetails(OrderId, ProductId, Quantity)
            VALUES(OrderIdVar, ProductIdVar, QuantityVar);
    END;
    
CREATE PROCEDURE AddShoppingCart(UserIdVar NUMBER) AS
    BEGIN
        INSERT INTO ShoppingCarts(UserId)
            VALUES(UserIdVar);
    END;
    
CREATE PROCEDURE AddShoppingCartDetails(ShoppingCartIdVar NUMBER, ProductIdVar NUMBER, QuantityVar NUMBER) AS
    BEGIN
        INSERT INTO ShoppingCartDetails(ShoppingCartId, ProductId, Quantity)
            VALUES(ShoppingCartIdVar, ProductIdVar, QuantityVar);
    END;

CREATE PROCEDURE DeleteUser(IdVar NUMBER) AS
    BEGIN
        DELETE FROM Users WHERE Id = IdVar;
    END;

CREATE PROCEDURE DeleteProducer(IdVar NUMBER) AS
    BEGIN
        DELETE FROM Producers WHERE Id = IdVar;
    END;

CREATE PROCEDURE DeleteCategory(IdVar NUMBER) AS
    BEGIN
        DELETE FROM Categories WHERE Id = IdVar;
    END;

CREATE PROCEDURE DeleteSubcategory(IdVar NUMBER) AS
    BEGIN
        DELETE FROM Subcategories WHERE Id = IdVar;
    END;


CREATE PROCEDURE DeleteProduct(IdVar NUMBER) AS
    BEGIN
        DELETE FROM Products WHERE Id = IdVar;
    END;
    

CREATE PROCEDURE DeleteReview(IdVar NUMBER) AS
    BEGIN
        DELETE FROM Reviews WHERE Id = IdVar;
    END;
    
    
CREATE PROCEDURE DeleteOrder(IdVar NUMBER) AS
    BEGIN
        DELETE FROM Orders WHERE Id = IdVar;
    END;
    
    
CREATE PROCEDURE DeleteOrderDetails(IdVar NUMBER) AS
    BEGIN
        DELETE FROM OrderDetails WHERE Id = IdVar;
    END;
    

CREATE PROCEDURE DeleteShoppingCart(IdVar NUMBER) AS
    BEGIN
        DELETE FROM ShoppingCarts WHERE Id = IdVar;
    END;
    
    
CREATE PROCEDURE DeleteShoppingCartDetails(IdVar NUMBER) AS
    BEGIN
        DELETE FROM ShoppingCartDetails WHERE Id = IdVar;
    END;

CREATE PROCEDURE UpdateUser(IdVar NUMBER, FirstNameVar VARCHAR, MiddleNameVar VARCHAR, LastNameVar VARCHAR, EmailVar VARCHAR, PhoneNumberVar VARCHAR) AS
    BEGIN
        UPDATE Users
        SET FirstName = FirstNameVar, MiddleName = MiddleNameVar, LastName = LastNameVar, Email = EmailVar, PhoneNumber = PhoneNumberVar
        WHERE Id = IdVar;
    END;

CREATE PROCEDURE UpdateProducer(IdVar NUMBER, NameVar VARCHAR) AS
    BEGIN
        UPDATE Producers
        SET Name = NameVar
        WHERE Id = IdVar;
    END;
    
CREATE PROCEDURE UpdateCategory(IdVar NUMBER, NameVar VARCHAR) AS
    BEGIN
        UPDATE Categories
        SET Name = NameVar
        WHERE Id = IdVar;
    END;

CREATE PROCEDURE UpdateSubcategory(IdVar NUMBER, NameVar VARCHAR, CategoryIdVar NUMBER) AS
    BEGIN
        UPDATE Subcategories
        SET Name = NameVar, CategoryId = CategoryIdVar
        WHERE Id = IdVar;
    END;
    
CREATE PROCEDURE UpdateProduct(IdVar NUMBER, NameVar VARCHAR, DescriptionVar VARCHAR, SubcategoryIdVar NUMBER, ProducerIdVar NUMBER, PriceVar NUMBER, QuantityVar NUMBER) AS
    BEGIN
        UPDATE Products
        SET Name = NameVar, Description = DescriptionVar, SubcategoryId = SubcategoryIdVar, ProducerId = ProducerIdVar, Price = PriceVar, Quantity = QuantityVar
        WHERE Id = IdVar;
    END;
    
CREATE PROCEDURE UpdateReview(IdVar NUMBER, ProductIdVar NUMBER, UserIdVar NUMBER, RatingVar NUMBER, CommentsVar VARCHAR) AS
    BEGIN
        UPDATE Reviews
        SET ProductId = ProductIdVar, UserId = UserIdVar, Rating = RatingVar, Comments = CommentsVar
        WHERE Id = IdVar;
    END;
    
CREATE PROCEDURE UpdateOrder(IdVar NUMBER, UserIdVar NUMBER, OrderDateVar DATE, ShipDateVar DATE, AdressVar VARCHAR) AS
    BEGIN
        UPDATE Orders
        SET UserId = UserIdVar, OrderDate = OrderDateVar, ShipDate = ShipDateVar, Adress = AdressVar
        WHERE Id = IdVar;
    END;
    
CREATE PROCEDURE UpdateOrderDetails(IdVar NUMBER, OrderIdVar NUMBER, ProductIdVar NUMBER, QuantityVar NUMBER) AS
    BEGIN
        UPDATE OrderDetails
        SET OrderId = OrderIdVar, ProductId = ProductIdVar, Quantity = QuantityVar
        WHERE Id = IdVar;
    END;
    
CREATE PROCEDURE UpdateShoppingCart(IdVar NUMBER, UserIdVar NUMBER) AS
    BEGIN
        UPDATE ShoppingCarts
        SET UserId = UserIdVar
        WHERE Id = IdVar;
    END;
    
CREATE PROCEDURE UpdateShoppingCartDetails(IdVar NUMBER, ShoppingCartIdVar NUMBER, ProductIdVar NUMBER, QuantityVar NUMBER) AS
    BEGIN
        UPDATE ShoppingCartDetails
        SET ShoppingCartId = ShoppingCartIdVar, ProductId = ProductIdVar, Quantity = QuantityVar
        WHERE Id = IdVar;
    END;
    
CREATE PROCEDURE GetUserById(IdVar NUMBER) AS
    BEGIN
        SELECT * FROM Users WHERE Id = IdVar;
    END;
--Views--

CREATE VIEW ActiveOrdersView AS
    SELECT UserId, u.FirstName, u.LastName, u.MiddleName, OrderDate, ShipDate, Adress FROM Orders o
    LEFT JOIN Users u ON o.UserId = u.Id
    WHERE ShipDate > sysdate;
    
CREATE FUNCTION get_enc_val(p_in_val IN VARCHAR2, p_key IN VARCHAR2)
   RETURN VARCHAR2
IS
   l_enc_val   RAW (4000);
BEGIN
   l_enc_val :=
      DBMS_CRYPTO.encrypt (src      => utl_i18n.string_to_raw (p_in_val,
                                                               'AL32UTF8'
                                                              ),
                           key      => utl_i18n.string_to_raw (p_key,
                                                               'AL32UTF8'
                                                              ),
                           typ      =>   DBMS_CRYPTO.encrypt_aes128
                                       + DBMS_CRYPTO.chain_cbc
                                       + DBMS_CRYPTO.pad_pkcs5
                          );
   RETURN l_enc_val;
END;

CREATE FUNCTION get_dec_val(enc_val IN VARCHAR2, l_key IN VARCHAR2)
    RETURN VARCHAR2
IS
   l_in_val   RAW (2000)      := HEXTORAW (enc_val);
   l_mod      NUMBER
      :=   DBMS_CRYPTO.encrypt_aes128
        + DBMS_CRYPTO.chain_cbc
        + DBMS_CRYPTO.pad_pkcs5;
   l_dec      RAW (2000);
BEGIN
    l_dec := DBMS_CRYPTO.decrypt(l_in_val,
       l_mod,
       utl_i18n.string_to_raw (l_key, 'AL32UTF8')
       );
RETURN utl_i18n.raw_to_char (l_dec);
END;

CREATE TRIGGER encrypt_password
   BEFORE INSERT OR UPDATE OF Password ON Users
   FOR EACH ROW
   BEGIN
   :NEW.Password := get_enc_val(:NEW.Password, '1234567890123456');
   END;
   
   DROP TRIGGER encrypt_password;